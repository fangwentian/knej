var path = require('../../../lib/util/path.js'),
    should = require('should'),
    root = __dirname+'/';

describe('util/path',function(){
    
    describe('.normalize(path)',function(){
        [
            {
                uri:'/a/./b/../c//d\\e\\',
                result:'/a/c/d/e/'
            },
            {
                uri:'c:\\a/./b/../c//d\\e\\',
                result:'c:/a/c/d/e/'
            },
            {
                uri:'http://a.b.com/a/./b/../c//d\\e\\',
                result:'http://a.b.com/a/c/d/e/'
            },
            {
                uri:'https://a.b.com/a/./b/../c//d\\e\\',
                result:'https://a.b.com/a/c/d/e/'
            },
            {
                uri:'',
                result:'./'
            }
        ].forEach(function(config){
            it('should return '+config.result+' for '+config.uri,function(){
                path.normalize(config.uri).should.equal(config.result);
            });
        });
    });
    
    describe('.absoluteURL(url,root)',function(){
        [
            {
                uri:'http://a.b.com/c/',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/'
            },
            {
                uri:'./a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/d/a/b'
            },
            {
                uri:'../a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/a/b'
            },
            {
                uri:'/a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'/a/b',
                root:'http://a.b.com/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'../../a/b',
                root:'http://a.b.com/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'a/b',
                root:'http://a.b.com:8090/',
                result:'http://a.b.com:8090/a/b'
            }
        ].forEach(function(config){
            it('should return '+config.result+' for '+config.uri+' with root '+config.root,function(){
                path.absoluteURL(config.uri,config.root).should.equal(config.result);
            });
        });
    });
    
    describe('.absolutePath(path,root)',function(){
        [
            {
                uri:'.//a/b',
                root:'/home/user/local/',
                result:'/home/user/local/a/b'
            },
            {
                uri:'/a/b',
                root:'/home/user/local/',
                result:'/a/b'
            },
            {
                uri:'../../../../../a/b',
                root:'/home/user/local/',
                result:'/a/b'
            },
            {
                uri:'a/b',
                root:'/home/user/local/',
                result:'/home/user/local/a/b'
            },
            {
                uri:'c:/a/b',
                root:'c:/user/local/',
                result:'c:/a/b'
            },
            {
                uri:'../../../../../a/b',
                root:'c:/user/local/',
                result:'c:/a/b'
            },
            {
                uri:'a/b',
                root:'c:/user/local/',
                result:'c:/user/local/a/b'
            }
        ].forEach(function(config){
            it('should return '+config.result+' for '+config.uri+' with root '+config.root,function(){
                path.absolutePath(config.uri,config.root).should.equal(config.result);
            });
        });
    });
    
    describe('.absolute(file,root)',function(){
        [
            {
                uri:'http://a.b.com/c/',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/'
            },
            {
                uri:'./a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/d/a/b'
            },
            {
                uri:'../a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/c/a/b'
            },
            {
                uri:'/a/b',
                root:'http://a.b.com/c/d/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'/a/b',
                root:'http://a.b.com/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'../../a/b',
                root:'http://a.b.com/',
                result:'http://a.b.com/a/b'
            },
            {
                uri:'a/b',
                root:'http://a.b.com:8090/',
                result:'http://a.b.com:8090/a/b'
            },
            {
                uri:'.//a/b',
                root:'/home/user/local/',
                result:'/home/user/local/a/b'
            },
            {
                uri:'/a/b',
                root:'/home/user/local/',
                result:'/a/b'
            },
            {
                uri:'../../../../../a/b',
                root:'/home/user/local/',
                result:'/a/b'
            },
            {
                uri:'a/b',
                root:'/home/user/local/',
                result:'/home/user/local/a/b'
            },
            {
                uri:'c:/a/b',
                root:'c:/user/local/',
                result:'c:/a/b'
            },
            {
                uri:'../../../../../a/b',
                root:'c:/user/local/',
                result:'c:/a/b'
            },
            {
                uri:'a/b',
                root:'c:/user/local/',
                result:'c:/user/local/a/b'
            },
            {
                uri:'/a/b/',
                root:'/',
                result:'/a/b/'
            },
            {
                uri:'c:/user/',
                root:'/',
                result:'c:/user/'
            }
        ].forEach(function(config){
            it('should return '+config.result+' for '+config.uri+' with root '+config.root,function(){
                path.absolute(config.uri,config.root).should.equal(config.result);
            });
        });
    });

    describe('.absoluteAltRoot(uri,pathRoot,webRoot)',function(){
        [
            {
                uri:'../../../../../a/b',
                pathRoot:'c:/user/local/',
                webRoot:'/home/user/local/',
                result:'c:/a/b'
            },
            {
                uri:'./a/b',
                pathRoot:'c:/user/local/',
                webRoot:'/home/user/local/',
                result:'c:/user/local/a/b'
            },
            {
                uri:'a/b',
                pathRoot:'c:/user/local/',
                webRoot:'/home/user/local/',
                result:'c:/user/local/a/b'
            },
            {
                uri:'/a/b',
                pathRoot:'c:/user/local/',
                webRoot:'/home/user/local/',
                result:'/home/user/local/a/b'
            }
        ].forEach(function(config){
            it('should return '+config.result+' for '+config.uri+' with pathRoot '+config.pathRoot+' and webRoot '+config.webRoot,function(){
                path.absoluteAltRoot(config.uri,config.pathRoot,config.webRoot).should.equal(config.result);
            });
        });
    });

    describe('.isURL(url)',function(){
        [
            {
                uri:'http://a.b.com/a/b',
                result:true
            },
            {
                uri:'https://a.b.com/a/b',
                result:true
            },
            {
                uri:'ftp://a.b.com/a/b',
                result:true
            },
            {
                uri:'/home/user/local/',
                result:false
            }
        ].forEach(function(config){
            it('should return '+config.result+' when url is '+config.uri,function(){
                path.isURL(config.uri).should.equal(config.result);
            });
        });
    });

    describe('.wrapURI(uri)',function(){
        [
            {
                uri:'c:/a/b/a.png',
                result:'#<+c:/a/b/a.png>#'
            },
            {
                uri:'c:/a/b/a.css',
                type:'cs',
                result:'#<cs+c:/a/b/a.css>#'
            },
            {
                uri:'c:/a/b/a.js',
                type:'js',
                result:'#<js+c:/a/b/a.js>#'
            },
            {
                uri:'c:/a/b/',
                type:'ph',
                result:'#<ph+c:/a/b/>#'
            }
        ].forEach(function(config){
            it('should return '+config.result+' when uri is '+config.uri+' and type is '+config.type,function(){
                path.wrapURI(config.type,config.uri).should.equal(config.result);
            });
        });
    });

    describe('.unwrapURI(uri,func)',function(){
        [
            {
                uri:'#<rs+c:/a/b/a.png>#',
                result:'c:/a/b/a.png'
            },
            {
                uri:'#<rs+c:/a/b/a.png>#',
                func:function(type,uri){
                    return null;
                },
                result:'c:/a/b/a.png'
            },
            {
                uri:'#<rs+c:/a/b/a.png>#',
                func:function(type,uri){
                    return './a.png';
                },
                result:'./a.png'
            },
            {
                uri:'#<rs+c:/a/b/a># and #<cs+c:/a/b/b># and #<js+c:/a/b/c>#',
                func:function(type,uri){
                    return uri.replace('c:/a','')+'.'+type;
                },
                result:'/b/a.rs and /b/b.cs and /b/c.js'
            }
        ].forEach(function(config){
            it('should return '+config.result+' when uri is '+config.uri,function(){
                path.unwrapURI(config.uri,config.func).should.equal(config.result);
            });
        });
    });

    describe('.uri2key(uri)',function(){
        it('should generate unique key for uri',function(){
            var ret1 = path.uri2key('a.js');
            var ret2 = path.uri2key('a.js');
            ret1.should.be.eql(ret2);
            var ret3 = path.uri2key('c.js');
            ret3.should.not.be.eql(ret2);
        });
    });
});
